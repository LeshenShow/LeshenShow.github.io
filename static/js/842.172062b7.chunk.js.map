{"version":3,"file":"static/js/842.172062b7.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","components/Login/LoginContainer.jsx","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formSummaryError\":\"Login_formSummaryError__0Z-Xs\"};","import React from \"react\";\r\nimport style from \"./Login.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  Input,\r\n  createFieldManual,\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport { validators } from \"../../utils/validators/validators\";\r\nimport { Navigate } from \"react-router-dom\";\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    console.log(formData);\r\n    props.login(formData.email, formData.password, formData.rememberMe);\r\n  };\r\n  if (props.isAuth) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoginForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      {createFieldManual(Input, \"email\", {\r\n        validate: validators.required,\r\n        placeholder: \"Email\",\r\n      })}\r\n      {createFieldManual(Input, \"password\", {\r\n        placeholder: \"Password\",\r\n        validate: validators.required,\r\n        type: \"password\",\r\n      })}\r\n      {createFieldManual(Input, \"rememberMe\", {\r\n        type: \"checkbox\",\r\n        text: \"remember me\",\r\n      })}\r\n      {props.error && (\r\n        <div className={style.formSummaryError}>ERROR: {props.error}</div>\r\n      )}\r\n      <div>\r\n        <button>Enter</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: \"login\", // unique name for the form\r\n})(LoginForm);\r\nexport default Login;\r\n// //1\r\n//         {\r\n//           /* <Field\r\n//           component={Input}\r\n//           placeholder={\"Email\"}\r\n//           name={\"email\"}\r\n//           validate={validators.required}\r\n//         /> */\r\n// }\r\n// //2\r\n//                 {\r\n//                   /* <Field\r\n//           component={Input}\r\n//           type={\"password\"}\r\n//           placeholder={\"Password\"}\r\n//           name={\"password\"}\r\n//           validate={validators.required}\r\n//         /> */\r\n//                 }\r\n//                 {\r\n//                   /* <Field component={\"input\"} placeholder={\"Password\"} name={\"password\"} /> */\r\n// }\r\n//              //3\r\n//         {\r\n//           /* <Field\r\n//           component={Input}\r\n//           type={\"checkbox\"}\r\n//           name={\"rememberMe\"}\r\n//           // validate={validators.required}\r\n//         /> */\r\n//         }\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport { login, logout } from \"../../redux/authReducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n  componentDidMount() {}\r\n  render() {\r\n    return <Login {...this.props} />;\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({ isAuth: state.auth.isAuth });\r\nconst mapDispatchToProps = {\r\n  login: login,\r\n  logout: logout,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__DjFsL\",\"error_input\":\"FormsControls_error_input__IPVIy\",\"error\":\"FormsControls_error__GiRUL\"};","import React from \"react\";\r\nimport style from \"./FormsControls.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { validators } from \"../../../utils/validators/validators\";\r\n\r\nexport const FormControl = ({ input, meta, child, element, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, element, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n      {/* типа остаточные пропсы рестпропс? сделали костыль в 77 уроке */}\r\n    </FormControl>\r\n  );\r\n};\r\nexport const Input = (props) => {\r\n  const { input, meta, child, element, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createFieldManual = (component, name, props = {}) => (\r\n  <div>\r\n    <Field component={component} name={name} {...props} />\r\n    {props.text}\r\n  </div>\r\n);\r\n","export const validators = {\r\n  required(value) {\r\n    if (value) return undefined;\r\n    return \"error message\";\r\n  },\r\n  maxLength15(value) {\r\n    if (value && value.length > 15) return \"Max length is 15 symbols\";\r\n    return undefined;\r\n  },\r\n  minLength2(value) {\r\n    if (value && value.length < 2) return \"Min length is 2 symbols\";\r\n    return undefined;\r\n  },\r\n  //   maxLengthCreator: (maxLength) => (value) => {\r\n  //     if (value && value.length > maxLength)\r\n  //       return `Max length is ${maxLength} symbols`;\r\n  //     return undefined;\r\n  //   },\r\n  //   minLengthCreator: (minLength) => (value) => {\r\n  //     if (value && value.length < minLength)\r\n  //       return `Min length is ${minLength} symbols`;\r\n  //     return undefined;\r\n  //   },\r\n};\r\n"],"names":["LoginReduxForm","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","children","createFieldManual","Input","validate","validators","required","placeholder","type","text","error","className","style","_jsx","isAuth","Navigate","to","formData","console","log","login","email","password","rememberMe","LoginContainer","React","componentDidMount","render","Login","this","mapDispatchToProps","logout","connect","state","auth","FormControl","_ref","input","meta","child","element","hasError","touched","Textarea","restProps","component","name","arguments","length","undefined","Field","value","maxLength15","minLength2"],"sourceRoot":""}