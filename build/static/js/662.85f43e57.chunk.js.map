{"version":3,"file":"static/js/662.85f43e57.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.jsx","hoc/withAuthRedirect.jsx","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__8xLrm\",\"dialogItems\":\"Dialogs_dialogItems__zA91d\",\"active\":\"Dialogs_active__0JRjf\",\"dialog\":\"Dialogs_dialog__6zYRs\",\"photo\":\"Dialogs_photo__-0w4X\",\"messages\":\"Dialogs_messages__-nthE\",\"message\":\"Dialogs_message__DaynN\"};","import React from \"react\";\r\nimport style from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst Message = (props) => {\r\n  return <div className={style.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport style from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  // console.log(\"DialogItem\", props);\r\n  let path = `/Dialogs/${props.name}`;\r\n\r\n  return (\r\n    <div>\r\n      <NavLink className={`${style.dialog} ${style.active}`} to={path}>\r\n        <img className={style.photo} alt=\"\" src={props.photo}></img>\r\n        <div>{props.name}</div>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport Message from \"./MessageItem/MessageItem\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { validators } from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\n\r\nconst Dialogs = (props) => {\r\n  console.log(\"Dialogs\", props);\r\n  // console.log('Dialogs')\r\n  // console.log(props)\r\n  // debugger\r\n  //   let dialogsItems = [\r\n  //     <DialogItem name={dialogsData[0].name} id={dialogsData[0].id} />,\r\n  //     <DialogItem name={dialogsData[1].name} id={dialogsData[1].id} />,\r\n  //     <DialogItem name={dialogsData[2].name} id={dialogsData[2].id} />,\r\n  //     <DialogItem name={dialogsData[3].name} id={dialogsData[3].id} />,\r\n  //     <DialogItem name={dialogsData[4].name} id={dialogsData[4].id} />,\r\n  //     <DialogItem name={dialogsData[5].name} id={dialogsData[5].id} />,];\r\n  // let dialogItems = dialogsData.map( (dialog) => { return <DialogItem name={dialog.name} id={dialog.id}/>} );\r\n  let dialogItems = props.dialogsPage.dialogsData.map((dialog) => (\r\n    <DialogItem name={dialog.name} key={dialog.id} photo={dialog.photo} />\r\n  ));\r\n  let messageItems = props.dialogsPage.messagesData.map((message) => (\r\n    <Message message={message.message} key={message.id} />\r\n  ));\r\n  const addNewMessage = (formData) => {\r\n    props.addMessage(formData.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <div className={style.dialogItems}>{dialogItems}</div>\r\n      <div className={style.messages}>\r\n        {messageItems}\r\n        <div>\r\n          <DialogReduxForm onSubmit={addNewMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DialogForm = (props) => {\r\n  console.log(\"DialogForm\", props, \"\");\r\n  // let newMessageText = props.dialogsPage.newMessageText;\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Write a new message...\"\r\n          className={style.textarea}\r\n          name={\"newMessageBody\"}\r\n          component={Textarea}\r\n          validate={[\r\n            validators.required,\r\n            validators.maxLength15,\r\n            validators.minLength2,\r\n          ]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst DialogReduxForm = reduxForm({\r\n  form: \"dialog\", // unique name for the form\r\n})(DialogForm);\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { addMessageActionCreator } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  console.log(\"DialogsContainer\", state);\r\n  return { dialogsPage: state.dialogsPage };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessageBody) => {\r\n      let action = addMessageActionCreator(newMessageBody);\r\n      dispatch(action);\r\n    },\r\n  };\r\n};\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n// compose(\r\n//   connect(mapStateToProps, mapDispatchToProps),\r\n//   withAuthRedirect\r\n// )(Dialogs);\r\n// const DialogsContainer = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(AuthRedirectComponent);\r\n// export default DialogsContainer;\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__DjFsL\",\"error_input\":\"FormsControls_error_input__IPVIy\",\"error\":\"FormsControls_error__GiRUL\"};","import React from \"react\";\r\nimport style from \"./FormsControls.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { validators } from \"../../../utils/validators/validators\";\r\n\r\nexport const FormControl = ({ input, meta, child, element, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, element, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n      {/* типа остаточные пропсы рестпропс? сделали костыль в 77 уроке */}\r\n    </FormControl>\r\n  );\r\n};\r\nexport const Input = (props) => {\r\n  const { input, meta, child, element, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createFieldManual = (component, name, props = {}) => (\r\n  <div>\r\n    <Field component={component} name={name} {...props} />\r\n    {props.text}\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n// export let AuthRedirectComponent = (props) => {\r\n//   if (!this.props.isAuth) {\r\n//     return <Navigate to={\"/login\"} />;\r\n//   }\r\n//   return <Component {...props} />;\r\n// };\r\nlet mapStateToPropsForRedirect = (state) => ({ isAuth: state.auth.isAuth });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to={\"/login\"} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","export const validators = {\r\n  required(value) {\r\n    if (value) return undefined;\r\n    return \"error message\";\r\n  },\r\n  maxLength15(value) {\r\n    if (value && value.length > 15) return \"Max length is 15 symbols\";\r\n    return undefined;\r\n  },\r\n  minLength2(value) {\r\n    if (value && value.length < 2) return \"Min length is 2 symbols\";\r\n    return undefined;\r\n  },\r\n  //   maxLengthCreator: (maxLength) => (value) => {\r\n  //     if (value && value.length > maxLength)\r\n  //       return `Max length is ${maxLength} symbols`;\r\n  //     return undefined;\r\n  //   },\r\n  //   minLengthCreator: (minLength) => (value) => {\r\n  //     if (value && value.length < minLength)\r\n  //       return `Min length is ${minLength} symbols`;\r\n  //     return undefined;\r\n  //   },\r\n};\r\n"],"names":["props","_jsx","className","style","message","children","path","concat","name","_jsxs","NavLink","dialog","active","to","photo","alt","src","DialogReduxForm","reduxForm","form","console","log","onSubmit","handleSubmit","Field","placeholder","textarea","component","Textarea","validate","validators","required","maxLength15","minLength2","dialogItems","dialogsPage","dialogsData","map","DialogItem","id","messageItems","messagesData","Message","dialogs","messages","formData","addMessage","newMessageBody","compose","connect","state","dispatch","action","addMessageActionCreator","withAuthRedirect","Dialogs","FormControl","_ref","input","meta","child","element","hasError","touched","error","restProps","Input","createFieldManual","arguments","length","undefined","text","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","React","render","this","Navigate","value"],"sourceRoot":""}