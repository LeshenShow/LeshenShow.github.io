{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../utils/object-helpers\";\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\nlet initialState = {\n  users: [],\n  pageSize: 4,\n  totalUsersCount: 1,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [],\n  maxPages: 10\n};\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true\n        })\n        // users: state.users.map((user) => {\n        //   if (user.id === action.userId) {\n        //     return { ...user, followed: true };\n        //   }\n        //   return user;\n        // }),\n        // users: [...state.users]\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: false\n        })\n        // users: state.users.map((user) => {\n        //   if (user.id === action.userId) {\n        //     return { ...user, followed: false };\n        //   }\n        //   return user;\n        // }),\n        // users: [...state.users]\n      };\n    case SET_USERS:\n      {\n        // return { ...state, users: [...state.users, ...action.users] };\n        return {\n          ...state,\n          users: action.users\n        };\n      }\n    case SET_CURRENT_PAGE:\n      {\n        return {\n          ...state,\n          currentPage: action.currentPage\n        };\n      }\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return {\n          ...state,\n          totalUsersCount: action.totalUsersCount\n        };\n      }\n    case TOGGLE_IS_FETCHING:\n      {\n        return {\n          ...state,\n          isFetching: action.isFetching\n        };\n      }\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return {\n          ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId) //фильтрация вернет новый объект массива\n        };\n      }\n    default:\n      break;\n  }\n  return state;\n};\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalUsersCount: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingInProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\n//ThunkCreator\nexport const requestUsers = (page, pageSize) => async dispatch => {\n  dispatch(toggleIsFetching(true));\n  let response = await usersAPI.getUsers(page, pageSize);\n  dispatch(setCurrentPage(page));\n  dispatch(toggleIsFetching(false));\n  dispatch(setUsers(response.data.items));\n  dispatch(setTotalUsersCount(response.data.totalCount));\n};\n// Мое решение функционала подписок follow/unfollow. Один экшн и одна санка. Экшн работает по принципу замены значения на противоположное, типа followed = !followed. Санка принимает id юзера и действие в виде строки (подписка или отписка). Принимает там, где вызывается, в компоненте User. Действие зависит от того, что в данный момент в стейте, подписаны или НЕподписаны. Санка подставляет это действие как название метода APIшки, которая и делает нужный запрос в санке. А экшн всегда вызывается один и тот же.\n\n// export function toggleFollow(id, status) {\n//   return (dispatch) => {\n//     dispatch(isFollow(id, true));\n//     requestAPI[status](id)\n//     .then(data => {\n//       if (data.resultCode === 0) {\n//         dispatch(follow(id));\n//       } else if (data.resultCode === 1) {\n//         console.log(`ERROR: ${data.messages[0]}`);\n//       }\n//       dispatch(isFollow(id, false));\n//     })\n//   }\n// }\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingInProgress(true, userId));\n  let response = await apiMethod(userId);\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(toggleFollowingInProgress(false, userId));\n};\nexport const follow = userId => async dispatch => {\n  let apiMethod = usersAPI.follow.bind(usersAPI);\n  let actionCreator = followSuccess;\n  followUnfollowFlow(dispatch, userId, apiMethod, actionCreator);\n};\nexport const unfollow = userId => async dispatch => {\n  let apiMethod = usersAPI.unfollow.bind(usersAPI);\n  let actionCreator = unfollowSuccess;\n  followUnfollowFlow(dispatch, userId, apiMethod, actionCreator);\n};\nexport default usersReducer;\n// refactoring .then to async await\n\n// export const unfollow2 = (userId) => {\n//   return (dispatch) => {\n//     dispatch(toggleFollowingInProgress(true, userId));\n//     usersAPI.unfollow(userId).then((data) => {\n//       if (data.resultCode === 0) {\n//         dispatch(unfollowSuccess(userId));\n//       }\n//       dispatch(toggleFollowingInProgress(false, userId));\n//     });\n//   };\n// };\n\n// export const setCurrentPageAC = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage: currentPage});\n//\n// export const updateNewPostTextActionCreator = (text) => ({\n//   type: UPDATE_NEW_POST_TEXT,\n//   newText: text,\n// });\n//-------------------->\n// export const followAC = (userId) => ({ type: FOLLOW, userId });\n// export const unfollowAC = (userId) => ({ type: UNFOLLOW, userId });\n// export const setUsersAC = (users) => ({ type: SET_USERS, users });\n// export const setCurrentPageAC = (currentPage) => ({\n//   type: SET_CURRENT_PAGE,\n//   currentPage,\n// });\n// export const setTotalUsersCountAC = (totalUsersCount) => ({\n//   type: SET_TOTAL_USERS_COUNT,\n//   totalUsersCount: totalUsersCount,\n// });\n// export const toggleIsFetchingAC = (isFetching) => ({\n//   type: TOGGLE_IS_FETCHING,\n//   isFetching,\n// });","map":{"version":3,"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","maxPages","usersReducer","state","action","type","userId","followed","filter","id","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingInProgress","requestUsers","page","dispatch","response","getUsers","data","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","follow","bind","unfollow"],"sources":["C:/Users/Leshen/Desktop/JS/after_courses/react/ZooPlanet/LeshenShow.github.io/src/redux/usersReducer.js"],"sourcesContent":["import { usersAPI } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 4,\r\n  totalUsersCount: 1,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [],\r\n  maxPages: 10,\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: true,\r\n        }),\r\n        // users: state.users.map((user) => {\r\n        //   if (user.id === action.userId) {\r\n        //     return { ...user, followed: true };\r\n        //   }\r\n        //   return user;\r\n        // }),\r\n        // users: [...state.users]\r\n      };\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: false,\r\n        }),\r\n        // users: state.users.map((user) => {\r\n        //   if (user.id === action.userId) {\r\n        //     return { ...user, followed: false };\r\n        //   }\r\n        //   return user;\r\n        // }),\r\n        // users: [...state.users]\r\n      };\r\n    case SET_USERS: {\r\n      // return { ...state, users: [...state.users, ...action.users] };\r\n      return { ...state, users: action.users };\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return { ...state, currentPage: action.currentPage };\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return { ...state, totalUsersCount: action.totalUsersCount };\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return { ...state, isFetching: action.isFetching };\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId), //фильтрация вернет новый объект массива\r\n      };\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId });\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId });\r\nexport const setUsers = (users) => ({ type: SET_USERS, users });\r\nexport const setCurrentPage = (currentPage) => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n});\r\nexport const setTotalUsersCount = (totalUsersCount) => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  totalUsersCount: totalUsersCount,\r\n});\r\nexport const toggleIsFetching = (isFetching) => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n});\r\nexport const toggleFollowingInProgress = (isFetching, userId) => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n});\r\n//ThunkCreator\r\nexport const requestUsers = (page, pageSize) => async (dispatch) => {\r\n  dispatch(toggleIsFetching(true));\r\n  let response = await usersAPI.getUsers(page, pageSize);\r\n  dispatch(setCurrentPage(page));\r\n  dispatch(toggleIsFetching(false));\r\n  dispatch(setUsers(response.data.items));\r\n  dispatch(setTotalUsersCount(response.data.totalCount));\r\n};\r\n// Мое решение функционала подписок follow/unfollow. Один экшн и одна санка. Экшн работает по принципу замены значения на противоположное, типа followed = !followed. Санка принимает id юзера и действие в виде строки (подписка или отписка). Принимает там, где вызывается, в компоненте User. Действие зависит от того, что в данный момент в стейте, подписаны или НЕподписаны. Санка подставляет это действие как название метода APIшки, которая и делает нужный запрос в санке. А экшн всегда вызывается один и тот же.\r\n\r\n// export function toggleFollow(id, status) {\r\n//   return (dispatch) => {\r\n//     dispatch(isFollow(id, true));\r\n//     requestAPI[status](id)\r\n//     .then(data => {\r\n//       if (data.resultCode === 0) {\r\n//         dispatch(follow(id));\r\n//       } else if (data.resultCode === 1) {\r\n//         console.log(`ERROR: ${data.messages[0]}`);\r\n//       }\r\n//       dispatch(isFollow(id, false));\r\n//     })\r\n//   }\r\n// }\r\nconst followUnfollowFlow = async (\r\n  dispatch,\r\n  userId,\r\n  apiMethod,\r\n  actionCreator\r\n) => {\r\n  dispatch(toggleFollowingInProgress(true, userId));\r\n  let response = await apiMethod(userId);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  dispatch(toggleFollowingInProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId) => async (dispatch) => {\r\n  let apiMethod = usersAPI.follow.bind(usersAPI);\r\n  let actionCreator = followSuccess;\r\n  followUnfollowFlow(dispatch, userId, apiMethod, actionCreator);\r\n};\r\nexport const unfollow = (userId) => async (dispatch) => {\r\n  let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n  let actionCreator = unfollowSuccess;\r\n  followUnfollowFlow(dispatch, userId, apiMethod, actionCreator);\r\n};\r\n\r\nexport default usersReducer;\r\n// refactoring .then to async await\r\n\r\n// export const unfollow2 = (userId) => {\r\n//   return (dispatch) => {\r\n//     dispatch(toggleFollowingInProgress(true, userId));\r\n//     usersAPI.unfollow(userId).then((data) => {\r\n//       if (data.resultCode === 0) {\r\n//         dispatch(unfollowSuccess(userId));\r\n//       }\r\n//       dispatch(toggleFollowingInProgress(false, userId));\r\n//     });\r\n//   };\r\n// };\r\n\r\n// export const setCurrentPageAC = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage: currentPage});\r\n//\r\n// export const updateNewPostTextActionCreator = (text) => ({\r\n//   type: UPDATE_NEW_POST_TEXT,\r\n//   newText: text,\r\n// });\r\n//-------------------->\r\n// export const followAC = (userId) => ({ type: FOLLOW, userId });\r\n// export const unfollowAC = (userId) => ({ type: UNFOLLOW, userId });\r\n// export const setUsersAC = (users) => ({ type: SET_USERS, users });\r\n// export const setCurrentPageAC = (currentPage) => ({\r\n//   type: SET_CURRENT_PAGE,\r\n//   currentPage,\r\n// });\r\n// export const setTotalUsersCountAC = (totalUsersCount) => ({\r\n//   type: SET_TOTAL_USERS_COUNT,\r\n//   totalUsersCount: totalUsersCount,\r\n// });\r\n// export const toggleIsFetchingAC = (isFetching) => ({\r\n//   type: TOGGLE_IS_FETCHING,\r\n//   isFetching,\r\n// });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}