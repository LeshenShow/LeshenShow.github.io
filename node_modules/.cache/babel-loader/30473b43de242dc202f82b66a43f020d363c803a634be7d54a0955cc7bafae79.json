{"ast":null,"code":"import{getAuthUserData}from\"./authReducer\";const INITIALIZED_SUCCESS=\"INITIALIZED_SUCCESS\";// STATE\nlet initialState={initialized:false};const appReducer=function(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;let action=arguments.length>1?arguments[1]:undefined;switch(action.type){case INITIALIZED_SUCCESS:return{...state,initialized:true};default:break;}return state;};// ACTION CREATOR\nexport const setInitializedSuccess=()=>({type:INITIALIZED_SUCCESS});// THUNK\nexport const initializeApp=()=>{return dispatch=>{// мы сделали возврат диспатча в authReducer, что не рекомендуется делать, получили промис т.к. then возвращает тоже промис\nlet promise=dispatch(getAuthUserData());// let promise2 = dispatch(some());\n// let promise3 = dispatch(some());\n// когда все промисы получает ответ, тогда диспатч\nPromise.all([promise]).then(()=>{dispatch(setInitializedSuccess());});};};export default appReducer;","map":{"version":3,"names":["getAuthUserData","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","arguments","length","undefined","action","type","setInitializedSuccess","initializeApp","dispatch","promise","Promise","all","then"],"sources":["C:/Users/Leshen/Desktop/JS/after_courses/react/ZooPlanet/LeshenShow.github.io/src/redux/appReducer.js"],"sourcesContent":["import { getAuthUserData } from \"./authReducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n// STATE\r\nlet initialState = {\r\n  initialized: false,\r\n};\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n// ACTION CREATOR\r\nexport const setInitializedSuccess = () => ({\r\n  type: INITIALIZED_SUCCESS,\r\n});\r\n// THUNK\r\nexport const initializeApp = () => {\r\n  return (dispatch) => {\r\n    // мы сделали возврат диспатча в authReducer, что не рекомендуется делать, получили промис т.к. then возвращает тоже промис\r\n    let promise = dispatch(getAuthUserData());\r\n    // let promise2 = dispatch(some());\r\n    // let promise3 = dispatch(some());\r\n    // когда все промисы получает ответ, тогда диспатч\r\n    Promise.all([promise]).then(() => {\r\n      dispatch(setInitializedSuccess());\r\n    });\r\n  };\r\n};\r\n\r\nexport default appReducer;\r\n"],"mappings":"AAAA,OAASA,eAAe,KAAQ,eAAe,CAE/C,KAAM,CAAAC,mBAAmB,CAAG,qBAAqB,CACjD;AACA,GAAI,CAAAC,YAAY,CAAG,CACjBC,WAAW,CAAE,KACf,CAAC,CACD,KAAM,CAAAC,UAAU,CAAG,QAAAA,CAAA,CAAkC,IAAjC,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGJ,YAAY,IAAE,CAAAO,MAAM,CAAAH,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CAC9C,OAAQC,MAAM,CAACC,IAAI,EACjB,IAAK,CAAAT,mBAAmB,CACtB,MAAO,CACL,GAAGI,KAAK,CACRF,WAAW,CAAE,IACf,CAAC,CACH,QACE,MACJ,CACA,MAAO,CAAAE,KAAK,CACd,CAAC,CACD;AACA,MAAO,MAAM,CAAAM,qBAAqB,CAAGA,CAAA,IAAO,CAC1CD,IAAI,CAAET,mBACR,CAAC,CAAC,CACF;AACA,MAAO,MAAM,CAAAW,aAAa,CAAGA,CAAA,GAAM,CACjC,MAAQ,CAAAC,QAAQ,EAAK,CACnB;AACA,GAAI,CAAAC,OAAO,CAAGD,QAAQ,CAACb,eAAe,CAAC,CAAC,CAAC,CACzC;AACA;AACA;AACAe,OAAO,CAACC,GAAG,CAAC,CAACF,OAAO,CAAC,CAAC,CAACG,IAAI,CAAC,IAAM,CAChCJ,QAAQ,CAACF,qBAAqB,CAAC,CAAC,CAAC,CACnC,CAAC,CAAC,CACJ,CAAC,CACH,CAAC,CAED,cAAe,CAAAP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}