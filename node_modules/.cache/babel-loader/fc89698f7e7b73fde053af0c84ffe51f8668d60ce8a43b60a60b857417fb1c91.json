{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_AUTH_USER_DATA = \"auth/SET_AUTH_USER_DATA\";\n// STATE\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      break;\n  }\n  return state;\n};\n// ACTION CREATOR\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\n// THUNK\n// export const getAuthUserData = () => (dispatch) => {\n//   return authAPI.getMe().then((response) => {\n//     if (response.data.resultCode === 0) {\n//       let { id, email, login } = response.data.data;\n//       dispatch(setAuthUserData(id, email, login, true));\n//     }\n//   });\n// };\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.getMe();\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["authAPI","stopSubmit","SET_AUTH_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","getMe","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"sources":["C:/Users/Leshen/Desktop/JS/after_courses/react/ZooPlanet/LeshenShow.github.io/src/redux/authReducer.js"],"sourcesContent":["import { authAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst SET_AUTH_USER_DATA = \"auth/SET_AUTH_USER_DATA\";\r\n// STATE\r\nlet initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n};\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_AUTH_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n// ACTION CREATOR\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n  type: SET_AUTH_USER_DATA,\r\n  payload: { userId, email, login, isAuth },\r\n});\r\n// THUNK\r\n// export const getAuthUserData = () => (dispatch) => {\r\n//   return authAPI.getMe().then((response) => {\r\n//     if (response.data.resultCode === 0) {\r\n//       let { id, email, login } = response.data.data;\r\n//       dispatch(setAuthUserData(id, email, login, true));\r\n//     }\r\n//   });\r\n// };\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  let response = await authAPI.getMe();\r\n  if (response.data.resultCode === 0) {\r\n    let { id, email, login } = response.data.data;\r\n    dispatch(setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n  let response = await authAPI.login(email, password, rememberMe);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    let message =\r\n      response.data.messages.length > 0\r\n        ? response.data.messages[0]\r\n        : \"Some Error\";\r\n    dispatch(\r\n      stopSubmit(\"login\", {\r\n        _error: message,\r\n      })\r\n    );\r\n  }\r\n};\r\nexport const logout = () => async (dispatch) => {\r\n  let response = await authAPI.logout();\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,UAAU,QAAQ,YAAY;AAEvC,MAAMC,kBAAkB,GAAG,yBAAyB;AACpD;AACA,IAAIC,YAAY,GAAG;EACjBC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE;AACV,CAAC;AACD,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKT,kBAAkB;MACrB,OAAO;QACL,GAAGO,KAAK;QACR,GAAGC,MAAM,CAACE;MACZ,CAAC;IACH;MACE;EACJ;EACA,OAAOH,KAAK;AACd,CAAC;AACD;AACA,OAAO,MAAMI,eAAe,GAAGA,CAACT,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,MAAM;EAChEI,IAAI,EAAET,kBAAkB;EACxBU,OAAO,EAAE;IAAER,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAO;AAC1C,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,eAAe,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvD,IAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,KAAK,CAAC,CAAC;EACpC,IAAID,QAAQ,CAACE,IAAI,CAACC,UAAU,KAAK,CAAC,EAAE;IAClC,IAAI;MAAEC,EAAE;MAAEf,KAAK;MAAEC;IAAM,CAAC,GAAGU,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC7CH,QAAQ,CAACF,eAAe,CAACO,EAAE,EAAEf,KAAK,EAAEC,KAAK,EAAE,IAAI,CAAC,CAAC;EACnD;AACF,CAAC;AAED,OAAO,MAAMA,KAAK,GAAGA,CAACD,KAAK,EAAEgB,QAAQ,EAAEC,UAAU,KAAK,MAAOP,QAAQ,IAAK;EACxE,IAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAK,CAACD,KAAK,EAAEgB,QAAQ,EAAEC,UAAU,CAAC;EAC/D,IAAIN,QAAQ,CAACE,IAAI,CAACC,UAAU,KAAK,CAAC,EAAE;IAClCJ,QAAQ,CAACD,eAAe,CAAC,CAAC,CAAC;EAC7B,CAAC,MAAM;IACL,IAAIS,OAAO,GACTP,QAAQ,CAACE,IAAI,CAACM,QAAQ,CAACC,MAAM,GAAG,CAAC,GAC7BT,QAAQ,CAACE,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC,GACzB,YAAY;IAClBT,QAAQ,CACNd,UAAU,CAAC,OAAO,EAAE;MAClByB,MAAM,EAAEH;IACV,CAAC,CACH,CAAC;EACH;AACF,CAAC;AACD,OAAO,MAAMI,MAAM,GAAGA,CAAA,KAAM,MAAOZ,QAAQ,IAAK;EAC9C,IAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC2B,MAAM,CAAC,CAAC;EACrC,IAAIX,QAAQ,CAACE,IAAI,CAACC,UAAU,KAAK,CAAC,EAAE;IAClCJ,QAAQ,CAACF,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;EACpD;AACF,CAAC;AAED,eAAeL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}